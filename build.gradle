/*
 * Copyright (c) 2015, The MITRE Corporation. All rights reserved.
 * See LICENSE for complete terms.
 *
 * Java-STIX-Validator Gradle Buildscript
 *
 * nemonik (Michael Joseph Walsh <github.com@nemonik.com>)
 *
 * Running the valdiator locally at the default port:
 *
 * ./gradlew stage
 * ./build/install/java-stix-validator/bin/java-stix-validator
 *
 * To change the port set an sytem environment vraible sorta like this:
 *
 * ./gradlew stage
 * export PORT=9090
 * ./build/install/java-stix-validator/bin/java-stix-validator
 * 
 */

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin:'application'
apply plugin: 'com.moowork.node'

mainClassName = 'org.mitre.stix.validator.App'

buildscript {
	repositories {
		jcenter()
		mavenCentral()
	}
	dependencies {
		classpath 'com.moowork.gradle:gradle-node-plugin:0.10'
	}
}

node {
	version = '0.12.4'
	download = true
}

task npmCacheConfig(type: NpmTask) {
	description = 'Configure the NPM cache'
	def npmCacheDir = "${System.getProperty('user.home')}/caches/npm"
	outputs.files file(npmCacheDir)
	args = [ 'config', 'set', 'cache', npmCacheDir ]
}

task npmPackages(type: NpmTask) {
	description = "Install Node.js packages"
	args = [ 'install' ]
	inputs.files file('package.json')
	outputs.files file('node_modules')
}

task installBower(type: NodeTask, dependsOn: npmPackages) {
	script = file('node_modules/bower/bin/bower')
	args = ["--config.storage.cache=${System.getProperty('user.home')}/caches/bower/cache",
			"--config.storage.packages=${System.getProperty('user.home')}/caches/bower/packages",
			"--config.storage.registry=${System.getProperty('user.home')}/caches/bower/registry",
			'install']
	inputs.files file('bower.json')
	outputs.files file('bower_components')
}

task syncJavascript(type: Sync, dependsOn: installBower) {
	from 'bower_components'
	into 'src/main/resources/public/js/bower_components'
	include 'angular*/*.min.js*'
	include 'ng-file-upload/*.min.js*'
	include 'angular-spinner/angular-spinner.min.js*'
	include 'angular-loading-spinner/angular-loading-spinner.js'
	include 'spin.js/spin.js'
	exclude 'ng-file-upload/ng-file-upload-all.min.js'
}

task syncStylesheets(type: Sync, dependsOn: installBower) {
	from 'bower_components'
	into 'src/main/resources/public/css/bower_components'
	include 'bootstrap/dist/css/*.min.css'
	include 'bootstrap/dist/fonts/*'
	include 'ng-file-upload/*.css'
}

processResources.dependsOn syncJavascript, syncStylesheets

clean.delete << file('src/main/resources/public/js/bower_components')
clean.delete << file('src/main/resources/public/css/bower_components')
clean.delete << file('node_modules')
clean.delete << file('bower_components')

repositories {
	jcenter()
	mavenCentral()
	mavenLocal()
	flatDir { dirs "libs" }
}

dependencies {
	compile 'com.sparkjava:spark-core:2.2'
	compile 'org.slf4j:slf4j-simple:1.7.12'
	compile 'com.google.code.gson:gson:2.3.1'
	
	compile 'com.fasterxml.jackson.core:jackson-databind:2.5.4'

	compile 'org.springframework:spring-core:4.1.4.RELEASE'
	compile 'commons-io:commons-io:2.4'
	compile 'com.github.zafarkhaja:java-semver:0.9.0'

	testCompile 'org.codehaus.groovy:groovy:2.4.3'
	testCompile 'org.spockframework:spock-core:1.0-groovy-2.4'
	
	testRuntime 'org.seleniumhq.selenium:selenium-htmlunit-driver:2.46.0'
}

if (System.getProperty("exec.args")) {
	port = System.getProperty("exec.args").split()[0]
}

task wrapper(type: Wrapper) {
	gradleVersion = '2.4'
	def jvmOpts='-Xmx1024m -Xms256m'
	inputs.property("jvmOpts", jvmOpts)
	doLast {
		def optsEnvVar = "DEFAULT_JVM_OPTS"
		scriptFile.write scriptFile.text.replace("$optsEnvVar=\"\"", "$optsEnvVar=\"$jvmOpts\"")
		batchScript.write batchScript.text.replace("set $optsEnvVar=", "set $optsEnvVar=$jvmOpts")
	}
}

task stage(dependsOn: installDist) {
}

task execute(type:JavaExec) {
	main = project.mainClassName
	classpath = sourceSets.main.runtimeClasspath
}

sourceSets {
	main {
		java { srcDirs("src/main/java") }
		resources {
			srcDir("src/main/resources")
		}
	}
}

jar {
	manifest {
		attributes 'Specification-Title': 'Java Stix Validator',
		'Specification-Version': version,
		'Implementation-Title': 'Java-STIX-Validator',
		'Implementation-Version': version,
		'Implementation-Vendor': 'The MITRE Corporation'
	}

	from 'LICENSE'
}